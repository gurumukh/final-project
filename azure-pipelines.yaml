name: Azure Pipelines
 
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'mySc'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'new-env'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2470922725'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#   
    # Postman - Install Newman    
    # Install Newman CLI tool
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman  
      displayName: Install Newman CLI
      # Postman Data Validation Test Suite    
      # Run Postman data validation test suite using Newman
    # - task: CmdLine@2
    #   displayName: Run Data Validation Tests
    #   continueOnError: true
    #   inputs:
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    #     script: 'newman run StarterAPIs.json -e postman_environment.json --reporters cli,junit --reporter-junit-export result/test-result.xml'
        

    # Postman Regression Test Suite    
    # Run Postman regression test suite using Newman
    - task: CmdLine@2
      displayName: Run Regression and validation Tests
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        script: 'newman run StarterAPIs.json -e postman_environment.json  --reporters cli,junit --reporter-junit-export result/test-result.xml'
        

    # Postman - Publish Results 
    # Publish test results to Azure Pipelines
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/result' # Search for test result files in TestResults directory under the default working directory
        testRunTitle: 'Postman Test Run' # Set the test run title to Postman Test Run

    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Fakerestapi Package'
      artifact: drop-fakerestapi

- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: myAgentPool
      vmImage: ubuntu-18.04
      
    environment: 'new-env'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'mySc'
                appName: 'udacityapp-AppService'
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  

          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.  
          # ToDo: Generate the log file. 
            - task: CmdLine@2
              inputs:
                script: |
                  # Install JMeter
                  sudo apt-get update
                  sudo apt-get install -y jmeter

                  # Unzip the JMeter test suite published zip artifact
                  unzip $(Pipeline.Workspace)/jmeter/faketestapi.zip -d $(Pipeline.Workspace)/jmeter

                  # Run the Performance Test Suite with 2 users
                  jmeter -n -t $(Pipeline.Workspace)/jmeter/starter.jmx -JAPPSERVICEURL=udacityapp-appservice.azurewebsites.net -JUSERS=2 -l $(Pipeline.Workspace)/jmeter/PerformanceTestSuite.jtl -e -o $(Pipeline.Workspace)/jmeter/PerformanceTestSuite
                  
                  # Generate the HTML report for Performance Test Suite
                  cd $(Pipeline.Workspace)/jmeter/PerformanceTestSuite
                  zip -r performance-report.zip *
                  PublishPipelineArtifact -artifactName 'PerformanceTestSuiteHTMLReport' -path $(Pipeline.Workspace)/jmeter/PerformanceTestSuite/performance-report.zip

                  # Run the Stress Test Suite with 10 users for 30 seconds
                  jmeter -n -t $(Pipeline.Workspace)/jmeter/stress.jmx -JAPPSERVICEURL=udacityapp-appservice.azurewebsites.net -JUSERS=10 -JDuration=30 -l $(Pipeline.Workspace)/jmeter/StressTestSuite.jtl -e -o $(Pipeline.Workspace)/jmeter/StressTestSuite
                  
                  # Generate the HTML report for Stress Test Suite
                  cd $(Pipeline.Workspace)/jmeter/StressTestSuite
                  zip -r stress-report.zip *
                  PublishPipelineArtifact -artifactName 'StressTestSuiteHTMLReport' -path $(Pipeline.Workspace)/jmeter/StressTestSuite/stress-report.zip

                  # Run the Endurance Test Suite with 2 users for 10 minutes
                  jmeter -n -t $(Pipeline.Workspace)/jmeter/endurance.jmx -JAPPSERVICEURL=udacityapp-appservice.azurewebsites.net -JUSERS=2 -JDuration=600 -l $(Pipeline.Workspace)/jmeter/EnduranceTestSuite.jtl -e -o $(Pipeline.Workspace)/jmeter/EnduranceTestSuite
                  
                  # Generate the HTML report for Endurance Test Suite
                  cd $(Pipeline.Workspace)/jmeter/EnduranceTestSuite
                  zip -r endurance-report.zip *
                  PublishPipelineArtifact -artifactName 'EnduranceTestSuiteHTMLReport' -path $(Pipeline.Workspace)/jmeter/EnduranceTestSuite/endurance-report.zip

                workingDirectory: $(Pipeline.Workspace)
