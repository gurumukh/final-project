name: Azure Pipelines
 
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'mySc'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'new-env'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate796232065'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Fakerestapi'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive Selenium files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      artifact: selenium-ui-test

- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: myAgentPool
      vmImage: ubuntu-18.04
    environment: 'new-env'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              
              inputs:
                tags: web
                azureSubscription: 'mySc'
                appName: 'udacityapp-Appservice'
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip


- stage: Test
  jobs:
  - job: Postman_Test
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    # Install Newman CLI tool
    - task: NodeTool@0
      displayName: Install Node
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman  
      displayName: Install Newman CLI

    - task: CmdLine@2
      displayName: Run Regression and validation Tests
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        script: 'newman run StarterAPIs.json -e postman_environment.json  --reporters cli,junit --reporter-junit-export result/test-result.xml'

    # Postman - Publish Results 
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/result' # Search for test result files in TestResults directory under the default working directory
        testRunTitle: 'Postman Test Run'

  
  - job: Performance_Test
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: EnduranceTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/endurance.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
    - task: Bash@3
      displayName: StressTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/stress.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport'
    - task: PublishBuildArtifacts@1
      displayName: Publish JMeter Report
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report'
        artifact: 'Jmeter Stress Test Report'
        


